name: Build Installer - MacOS Intel

on:
  push:
    branches:
      - 'long_lived/**'
      - main
      - 'release/**'
    tags:
        - '**'
  pull_request:
    branches:
      - '**'

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/long_lived/')) && github.sha || '' }}
  cancel-in-progress: true

jobs:
  build:
    name: MacOS Intel Installer
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: [3.9]
        os: [macos-10.15]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Cleanup any leftovers that exist from previous runs
      run: bash build_scripts/clean-runner.sh || true

    - name: Setup Python environment
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache npm
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: Cache pip
      uses: actions/cache@v3
      with:
        # Note that new runners may break this https://github.com/actions/cache/issues/292
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Get the most recent release from chia-plotter-madmax
    - uses: actions/github-script@v6
      id: 'latest-madmax'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const release = await github.rest.repos.getLatestRelease({
            owner: 'Chia-Network',
            repo: 'chia-plotter-madmax',
          });
          return release.data.tag_name;

    - name: Get latest madmax plotter
      run: |
        mkdir "$GITHUB_WORKSPACE/madmax"
        wget -O "$GITHUB_WORKSPACE/madmax/flax_plot" https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot-${{ steps.latest-madmax.outputs.result }}-macos-intel
        wget -O "$GITHUB_WORKSPACE/madmax/flax_plot_k34" https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot_k34-${{ steps.latest-madmax.outputs.result }}-macos-intel
        chmod +x "$GITHUB_WORKSPACE/madmax/flax_plot"
        chmod +x "$GITHUB_WORKSPACE/madmax/flax_plot_k34"

    - name: Run install script
      env:
        INSTALL_PYTHON_VERSION: ${{ matrix.python-version }}
      run: |
        sh install.sh -d

    - name: Setup Node 16.x
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'

    - name: Build MacOS DMG
      env:
        FLAX_INSTALLER_VERSION: ${{ steps.version_number.outputs.FLAX_INSTALLER_VERSION }}
        NOTARIZE: ${{ steps.check_secrets.outputs.HAS_APPLE_SECRET }}
        APPLE_NOTARIZE_USERNAME: "${{ secrets.APPLE_NOTARIZE_USERNAME }}"
        APPLE_NOTARIZE_PASSWORD: "${{ secrets.APPLE_NOTARIZE_PASSWORD }}"
      run: |
        git -C ./flax-blockchain-gui status
        . ./activate
        cd ./build_scripts
        sh build_macos.sh

    - name: Upload MacOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: flax-installers-macos-dmg-intel
        path: ${{ github.workspace }}/build_scripts/final_installer/
