name: ðŸ“¦ðŸš€ Build Installer - Windows 10

on:
  push:
    branches:
      - 'long_lived/**'
      - main
      - 'release/**'
    tags:
        - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    name: Windows 10 Installer
    runs-on: [windows-2019]
    timeout-minutes: 50
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Set Env
      if: github.event_name == 'release' && github.event.action == 'published'
      shell: bash
      run: |
        PRE_RELEASE=$(jq -r '.release.prerelease' "$GITHUB_EVENT_PATH")
        RELEASE_TAG=$(jq -r '.release.tag_name' "$GITHUB_EVENT_PATH")
        echo "RELEASE=true" >>$GITHUB_ENV
        echo "PRE_RELEASE=$PRE_RELEASE" >>$GITHUB_ENV
        echo "RELEASE_TAG=$RELEASE_TAG" >>$GITHUB_ENV
        if [ $PRE_RELEASE = false ]; then
          echo "FULL_RELEASE=true" >>$GITHUB_ENV
        else
          echo "FULL_RELEASE=false" >>$GITHUB_ENV
        fi

    - name: Set git urls to https instead of ssh
      run: |
        git config --global url."https://github.com/".insteadOf ssh://git@github.com/

    - uses: actions/setup-python@v3
      name: Install Python ${{ matrix.python-version }}
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup Node 16.x
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'

    # Create our own venv outside of the git directory JUST for getting the ACTUAL version so that install can't break it
    - name: Get version number
      id: version_number
      run: |
        python -m venv ..\venv
        . ..\venv\Scripts\Activate.ps1
        pip3 install setuptools_scm
        $env:FLAX_INSTALLER_VERSION = python .\build_scripts\installer-version.py -win
        echo "$env:FLAX_INSTALLER_VERSION"
        echo "::set-output name=FLAX_INSTALLER_VERSION::$env:FLAX_INSTALLER_VERSION"
        deactivate

      # Get the most recent release from chia-plotter-madmax
    - uses: actions/github-script@v6
      id: 'latest-madmax'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const release = await github.rest.repos.getLatestRelease({
            owner: 'Chia-Network',
            repo: 'chia-plotter-madmax',
          });
          return release.data.tag_name;

    - name: Get latest madmax plotter
      run: |
        mkdir "$env:GITHUB_WORKSPACE\madmax"
        Invoke-WebRequest https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot-${{ steps.latest-madmax.outputs.result }}.exe -OutFile "$env:GITHUB_WORKSPACE\madmax\flax_plot.exe"
        Invoke-WebRequest https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot_k34-${{ steps.latest-madmax.outputs.result }}.exe -OutFile "$env:GITHUB_WORKSPACE\madmax\flax_plot_k34.exe"

      # Get the most recent release from bladebit
    - uses: actions/github-script@v6
      if: '!github.event.release.prerelease'
      id: 'latest-bladebit'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const release = await github.rest.repos.getLatestRelease({
            owner: 'Chia-Network',
            repo: 'bladebit',
          });
          return release.data.tag_name;

    - name: Get latest bladebit plotter
      if: '!github.event.release.prerelease'
      run: |
        mkdir "$env:GITHUB_WORKSPACE\bladebit"
        Invoke-WebRequest https://github.com/Chia-Network/bladebit/releases/download/${{ steps.latest-bladebit.outputs.result }}/bladebit-${{ steps.latest-bladebit.outputs.result }}-windows-x86-64.zip -OutFile "$env:GITHUB_WORKSPACE\bladebit\bladebit.zip"
        Expand-Archive -Path "$env:GITHUB_WORKSPACE\bladebit\bladebit.zip" -DestinationPath "$env:GITHUB_WORKSPACE\bladebit\"
        rm "$env:GITHUB_WORKSPACE\bladebit\bladebit.zip"

    - name: Get latest prerelease bladebit plotter
      if: env.PRE_RELEASE == 'true'
      shell: bash
      run: |
        PRERELEASE_URL=$(curl -Ls -H "Accept: application/vnd.github+json" "https://api.github.com/repos/Chia-Network/bladebit/releases" | jq -r 'map(select(.prerelease)) | first.assets[] | select(.browser_download_url | endswith("windows-x86-64.zip")).browser_download_url')
        mkdir $GITHUB_WORKSPACE\\bladebit
        ls
        echo $PRERELEASE_URL
        curl -L "$PRERELEASE_URL" --output $GITHUB_WORKSPACE\\bladebit\\bladebit.zip
        unzip $GITHUB_WORKSPACE\\bladebit\\bladebit.zip -d $GITHUB_WORKSPACE\\bladebit\\
        rm $GITHUB_WORKSPACE\\bladebit\\bladebit.zip

    - name: Run install script
      env:
        INSTALL_PYTHON_VERSION: ${{ matrix.python-version }}
      run: |
        .\Install.ps1 -d

    - name: Build GUI
      continue-on-error: false
      run: |
        cd .\build_scripts
        .\build_windows-1-gui.ps1

    - name: Build Windows installer
      env:
        FLAX_INSTALLER_VERSION: ${{ steps.version_number.outputs.FLAX_INSTALLER_VERSION }}
        HAS_SECRET: ${{ steps.check_secrets.outputs.HAS_SIGNING_SECRET }}
        CSC_KEY_PASSWORD: ${{ secrets.WIN_CODE_SIGN_PASS }}
      run: |
        $env:path="C:\Program` Files` (x86)\Microsoft` Visual` Studio\2019\Enterprise\SDK\ScopeCppSDK\vc15\VC\bin\;$env:path"
        $env:path="C:\Program` Files` (x86)\Windows` Kits\10\App` Certification` Kit;$env:path"
        .\venv\Scripts\Activate.ps1
        cd .\build_scripts
        .\build_windows-2-installer.ps1

    - name: Upload Installer to artifacts
      uses: actions/upload-artifact@v3
      with:
        name: flax-installers-windows-exe-intel
        path: ${{ github.workspace }}\flax-blockchain-gui\release-builds\

    - name: Remove Windows exe and installer to exclude from cache
      run: |
        Remove-Item .\flax-blockchain-gui\packages\gui\dist -Recurse -Force
        Remove-Item .\flax-blockchain-gui\packages\gui\daemon -Recurse -Force
        Remove-Item .\flax-blockchain-gui\Flax-win32-x64 -Recurse -Force
        Remove-Item .\flax-blockchain-gui\release-builds -Recurse -Force