name: Linux .deb installer on Python 3.8

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
        - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    name: Linux .deb installer on Python 3.8
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: [3.8]
        os: [ubuntu-18.04]

    steps:
    - name: Cancel previous runs on the same branch
      if: ${{ github.ref != 'refs/heads/main' }}
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Cleanup any leftovers that exist from previous runs
      run: bash build_scripts/clean-runner.sh || true

    - name: Setup Python environment
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache npm
      uses: actions/cache@v2.1.6
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: Cache pip
      uses: actions/cache@v2.1.6
      with:
        # Note that new runners may break this https://github.com/actions/cache/issues/292
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Create our own venv outside of the git directory JUST for getting the ACTUAL version so that install can't break it
    - name: Get version number
      id: version_number
      run: |
        python3 -m venv ../venv
        . ../venv/bin/activate
        pip3 install setuptools_scm
        echo "::set-output name=FLAX_INSTALLER_VERSION::$(python3 ./build_scripts/installer-version.py)"
        deactivate

      # Get the most recent release from chia-plotter-madmax
    - uses: actions/github-script@v4
      id: 'latest-madmax'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const releases = await github.repos.listReleases({
            owner: 'Chia-Network',
            repo: 'chia-plotter-madmax',
          });
          return releases.data[0].tag_name;

    - name: Get latest madmax plotter
      run: |
        mkdir "$GITHUB_WORKSPACE/madmax"
        wget -O "$GITHUB_WORKSPACE/madmax/flax_plot" https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot-${{ steps.latest-madmax.outputs.result }}-x86-64
        wget -O "$GITHUB_WORKSPACE/madmax/flax_plot_k34" https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot_k34-${{ steps.latest-madmax.outputs.result }}-x86-64
        chmod +x "$GITHUB_WORKSPACE/madmax/flax_plot"
        chmod +x "$GITHUB_WORKSPACE/madmax/flax_plot_k34"

      # Get the most recent release from bladebit
    - uses: actions/github-script@v4
      id: 'latest-bladebit'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const releases = await github.repos.listReleases({
            owner: 'Chia-Network',
            repo: 'bladebit',
          });
          return releases.data[0].tag_name;

    - name: Get latest bladebit plotter
      run: |
        mkdir "$GITHUB_WORKSPACE/bladebit"
        wget -O /tmp/bladebit.tar.gz https://github.com/Chia-Network/bladebit/releases/download/${{ steps.latest-bladebit.outputs.result }}/bladebit-${{ steps.latest-bladebit.outputs.result }}-ubuntu-x86-64.tar.gz
        tar -xvzf /tmp/bladebit.tar.gz -C $GITHUB_WORKSPACE/bladebit
        chmod +x "$GITHUB_WORKSPACE/bladebit/bladebit"

    - name: Run install script
      env:
        INSTALL_PYTHON_VERSION: ${{ matrix.python-version }}
        BUILD_VDF_CLIENT: "N"
      run: |
        sh install.sh

    - name: Setup Node 12.x
      uses: actions/setup-node@v2.4.1
      with:
        node-version: '12.x'

    - name: Add jq
      run: |
        sudo apt-get install -y jq

    - name: Build .deb package
      run: |
        . ./activate
        ldd --version
        cd ./flax-blockchain-gui
        git status
        cd ../build_scripts
        sh build_linux_deb.sh amd64

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Linux-Installers
        path: ${{ github.workspace }}/build_scripts/final_installer/

    - name: Create Checksums
      if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
      env:
        FLAX_INSTALLER_VERSION: ${{ steps.version_number.outputs.FLAX_INSTALLER_VERSION }}
      run: |
         ls ${{ github.workspace }}/build_scripts/final_installer/
         sha256sum ${{ github.workspace }}/build_scripts/final_installer/flax-blockchain_${FLAX_INSTALLER_VERSION}_amd64.deb > ${{ github.workspace }}/build_scripts/final_installer/flax-blockchain_${FLAX_INSTALLER_VERSION}_amd64.deb.sha256
         ls ${{ github.workspace }}/build_scripts/final_installer/
